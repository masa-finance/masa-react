/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../../../../common';
import type {
  SBT,
  SBTInterface,
} from '../../../../../../@masa-finance/masa-contracts-identity/contracts/tokens/SBT/SBT';

const _abi = [
  {
    inputs: [
      {
        internalType: 'string',
        name: 'name_',
        type: 'string',
      },
      {
        internalType: 'string',
        name: 'symbol_',
        type: 'string',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: '_owner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: '_tokenId',
        type: 'uint256',
      },
    ],
    name: 'Burn',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: '_owner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: '_tokenId',
        type: 'uint256',
      },
    ],
    name: 'Mint',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'tokenId',
        type: 'uint256',
      },
    ],
    name: 'ownerOf',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes4',
        name: 'interfaceId',
        type: 'bytes4',
      },
    ],
    name: 'supportsInterface',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'symbol',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'tokenId',
        type: 'uint256',
      },
    ],
    name: 'tokenURI',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60806040523480156200001157600080fd5b5060405162000a8538038062000a85833981016040819052620000349162000187565b81516200004990600090602085019062000068565b5080516200005f90600190602084019062000068565b5050506200031c565b828054620000769062000283565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b6000620001256200011f8462000220565b62000201565b905082815260208101848484011115620001425762000142600080fd5b6200014f84828562000250565b509392505050565b600082601f8301126200016d576200016d600080fd5b81516200017f8482602086016200010e565b949350505050565b600080604083850312156200019f576200019f600080fd5b82516001600160401b03811115620001ba57620001ba600080fd5b620001c88582860162000157565b92505060208301516001600160401b03811115620001e957620001e9600080fd5b620001f78582860162000157565b9150509250929050565b60006200020d60405190565b90506200021b8282620002b4565b919050565b60006001600160401b038211156200023c576200023c620002fc565b620002478262000312565b60200192915050565b60005b838110156200026d57818101518382015260200162000253565b838111156200027d576000848401525b50505050565b6002810460018216806200029857607f821691505b60208210811415620002ae57620002ae620002e6565b50919050565b620002bf8262000312565b81018181106001600160401b0382111715620002df57620002df620002fc565b6040525050565b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b601f01601f191690565b610759806200032c6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806301ffc9a71461006757806306fdde03146100905780636352211e146100a557806370a08231146100c557806395d89b41146100e5578063c87b56dd146100ed575b600080fd5b61007a6100753660046104dc565b610100565b60405161008791906105b5565b60405180910390f35b610098610152565b60405161008791906105c3565b6100b86100b33660046104fd565b6101e4565b60405161008791906105a7565b6100d86100d33660046104b3565b610222565b6040516100879190610651565b610098610266565b6100986100fb3660046104fd565b610275565b60006001600160e01b031982166313f2a32f60e01b148061013157506001600160e01b03198216635b5e139f60e01b145b8061014c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060008054610161906106a0565b80601f016020809104026020016040519081016040528092919081815260200182805461018d906106a0565b80156101da5780601f106101af576101008083540402835291602001916101da565b820191906000526020600020905b8154815290600101906020018083116101bd57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03168061014c5760405162461bcd60e51b81526004016102199061061e565b60405180910390fd5b60006001600160a01b03821661024a5760405162461bcd60e51b8152600401610219906105d4565b506001600160a01b031660009081526003602052604090205490565b606060018054610161906106a0565b6060610280826102e9565b600061029760408051602081019091526000815290565b905060008151116102b757604051806020016040528060008152506102e2565b806102c184610320565b6040516020016102d292919061058f565b6040516020818303038152906040525b9392505050565b6000818152600260205260409020546001600160a01b031661031d5760405162461bcd60e51b81526004016102199061061e565b50565b6060600061032d836103bc565b60010190506000816001600160401b0381111561034c5761034c6106e3565b6040519080825280601f01601f191660200182016040528015610376576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846103af576103b4565b610380565b509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106103fb5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6904ee2d6d415b85acef8160201b8310610425576904ee2d6d415b85acef8160201b830492506020015b662386f26fc10000831061044357662386f26fc10000830492506010015b6305f5e100831061045b576305f5e100830492506008015b612710831061046f57612710830492506004015b60648310610481576064830492506002015b600a831061014c5760010192915050565b803561014c816106f9565b803561014c8161070d565b803561014c8161071d565b6000602082840312156104c8576104c8600080fd5b60006104d48484610492565b949350505050565b6000602082840312156104f1576104f1600080fd5b60006104d4848461049d565b60006020828403121561051257610512600080fd5b60006104d484846104a8565b6105278161065f565b82525050565b801515610527565b600061053f825190565b808452602084019350610556818560208601610670565b601f01601f19169290920192915050565b6000610571825190565b61057f818560208601610670565b9290920192915050565b80610527565b600061059b8285610567565b91506104d48284610567565b6020810161014c828461051e565b6020810161014c828461052d565b602080825281016102e28184610535565b6020808252810161014c81602681527f5342543a2061646472657373207a65726f206973206e6f7420612076616c69646020820152651037bbb732b960d11b604082015260600190565b6020808252810161014c81601581527414d0950e881a5b9d985b1a59081d1bdad95b881251605a1b602082015260400190565b6020810161014c8284610589565b60006001600160a01b03821661014c565b60005b8381101561068b578181015183820152602001610673565b8381111561069a576000848401525b50505050565b6002810460018216806106b457607f821691505b602082108114156106c7576106c76106cd565b50919050565b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6107028161065f565b811461031d57600080fd5b6001600160e01b03198116610702565b8061070256fea26469706673582212201cc4ea06feb89789f577d362ea9aac5483a4edfeb52aad5f2e2f24f7706a341564736f6c63430008070033';

type SBTConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SBTConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SBT__factory extends ContractFactory {
  constructor(...args: SBTConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SBT> {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<SBT>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  override attach(address: string): SBT {
    return super.attach(address) as SBT;
  }
  override connect(signer: Signer): SBT__factory {
    return super.connect(signer) as SBT__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SBTInterface {
    return new utils.Interface(_abi) as SBTInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): SBT {
    return new Contract(address, _abi, signerOrProvider) as SBT;
  }
}
