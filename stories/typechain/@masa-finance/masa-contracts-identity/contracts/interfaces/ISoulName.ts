/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface ISoulNameInterface extends utils.Interface {
  functions: {
    "getExtension()": FunctionFragment;
    "getSoulNames(uint256)": FunctionFragment;
    "getSoulNames(address)": FunctionFragment;
    "getTokenData(string)": FunctionFragment;
    "getTokenId(string)": FunctionFragment;
    "isAvailable(string)": FunctionFragment;
    "mint(address,string,uint256,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getExtension"
      | "getSoulNames(uint256)"
      | "getSoulNames(address)"
      | "getTokenData"
      | "getTokenId"
      | "isAvailable"
      | "mint"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getExtension",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSoulNames(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSoulNames(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAvailable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSoulNames(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSoulNames(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;

  events: {};
}

export interface ISoulName extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISoulNameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getExtension(overrides?: CallOverrides): Promise<[string]>;

    "getSoulNames(uint256)"(
      identityId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { sbtNames: string[] }>;

    "getSoulNames(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { sbtNames: string[] }>;

    getTokenData(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber, BigNumber, boolean] & {
        sbtName: string;
        linked: boolean;
        identityId: BigNumber;
        tokenId: BigNumber;
        expirationDate: BigNumber;
        active: boolean;
      }
    >;

    getTokenId(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isAvailable(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { available: boolean }>;

    mint(
      to: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      yearsPeriod: PromiseOrValue<BigNumberish>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getExtension(overrides?: CallOverrides): Promise<string>;

  "getSoulNames(uint256)"(
    identityId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getSoulNames(address)"(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getTokenData(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber, BigNumber, BigNumber, boolean] & {
      sbtName: string;
      linked: boolean;
      identityId: BigNumber;
      tokenId: BigNumber;
      expirationDate: BigNumber;
      active: boolean;
    }
  >;

  getTokenId(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAvailable(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    to: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    yearsPeriod: PromiseOrValue<BigNumberish>,
    _tokenURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getExtension(overrides?: CallOverrides): Promise<string>;

    "getSoulNames(uint256)"(
      identityId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getSoulNames(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getTokenData(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber, BigNumber, boolean] & {
        sbtName: string;
        linked: boolean;
        identityId: BigNumber;
        tokenId: BigNumber;
        expirationDate: BigNumber;
        active: boolean;
      }
    >;

    getTokenId(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAvailable(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      to: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      yearsPeriod: PromiseOrValue<BigNumberish>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getExtension(overrides?: CallOverrides): Promise<BigNumber>;

    "getSoulNames(uint256)"(
      identityId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSoulNames(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenData(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenId(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAvailable(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      to: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      yearsPeriod: PromiseOrValue<BigNumberish>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getExtension(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSoulNames(uint256)"(
      identityId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSoulNames(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenData(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenId(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAvailable(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      yearsPeriod: PromiseOrValue<BigNumberish>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
